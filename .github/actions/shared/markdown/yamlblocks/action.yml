name: Parse YAML from Markdown
description: 'Extracts YAML code blocks from markdown and outputs as YAML and JSON, using markdown headings as keys'

inputs:
  markdown-content:
    description: 'The markdown content to parse'
    required: true
    default: ''

outputs:
  named_yaml:
    description: 'YAML blocks with filenames as markers'
  unnamed_yaml:
    description: 'YAML blocks without filenames'
  failed_yaml:
    description: 'YAML blocks that failed to parse'
  named_json:
    description: 'Named YAML blocks as JSON'
  unnamed_json:
    description: 'Unnamed YAML blocks as JSON'
  failed_json:
    description: 'Failed blocks as JSON'
  
runs:
  using: 'composite'
  steps:
    - name: Install js-yaml
      shell: bash
      run: npm install js-yaml
      
    - name: Parse YAML from Markdown
      uses: actions/github-script@v7
      with:
        script: |
          const yaml = require('js-yaml');
          const markdown = core.getInput('markdown-content');
          
          // Store blocks by type
          const namedBlocks = {};
          const unnamedBlocks = [];
          const failedBlocks = {};

          // Match named blocks like ```filename.yaml
          const namedBlockRegex = /```([a-zA-Z0-9_\-\.]+\.ya?ml)\n([\s\S]*?)```/g;
          let namedMatches = [...markdown.matchAll(namedBlockRegex)];
          
          namedMatches.forEach(match => {
            const filename = match[1];
            try {
              const yamlContent = match[2].trim();
              if (!namedBlocks[filename]) {
                namedBlocks[filename] = [];
              }
              namedBlocks[filename].push(yaml.load(yamlContent));
            } catch (error) {
              core.warning(`Failed to parse named YAML block "${filename}": ${error.message}`);
              if (!failedBlocks[filename]) {
                failedBlocks[filename] = [];
              }
              failedBlocks[filename].push({
                content: yamlContent,
                error: error.message
              });
            }
          });

          // Match unnamed blocks ```yaml
          const unnamedBlockRegex = /```ya?ml\n([\s\S]*?)```/g;
          let unnamedMatches = [...markdown.matchAll(unnamedBlockRegex)];
          
          unnamedMatches.forEach(match => {
            try {
              const yamlContent = match[1].trim();
              unnamedBlocks.push(yaml.load(yamlContent));
            } catch (error) {
              core.warning(`Failed to parse unnamed YAML block: ${error.message}`);
              failedBlocks['unnamed'] = failedBlocks['unnamed'] || [];
              failedBlocks['unnamed'].push({
                content: yamlContent,
                error: error.message
              });
            }
          });
                try {
                  const yamlContent = match[1].trim();
                  return yaml.load(yamlContent);
                } catch (error) {
                  core.warning(`Failed to parse YAML block under "${heading}": ${error.message}`);
                  if (!failedBlocks[heading]) {
                    failedBlocks[heading] = [];
                  }
                  failedBlocks[heading].push({
                    content: yamlContent,
                    error: error.message
                  });
                  return null;
                }
              }).filter(Boolean);
            }
          });
          
          // Convert and output named blocks
          const namedYaml = yaml.dump(namedBlocks);
          const namedJson = JSON.stringify(namedBlocks, null, 2);
          console.log('Named blocks YAML:');
          console.log(namedYaml);
          core.setOutput('named_yaml', namedYaml);
          core.setOutput('named_json', namedJson);

          // Convert and output unnamed blocks
          const unnamedYaml = yaml.dump(unnamedBlocks);
          const unnamedJson = JSON.stringify(unnamedBlocks, null, 2);
          console.log('\nUnnamed blocks YAML:');
          console.log(unnamedYaml);
          core.setOutput('unnamed_yaml', unnamedYaml);
          core.setOutput('unnamed_json', unnamedJson);

          // Convert and output failed blocks
          const failedYaml = yaml.dump(failedBlocks);
          const failedJson = JSON.stringify(failedBlocks, null, 2);
          if (Object.keys(failedBlocks).length > 0) {
            console.log('\nFailed blocks:');
            console.log(failedYaml);
          }
          core.setOutput('failed_yaml', failedYaml);
          core.setOutput('failed_json', failedJson);
