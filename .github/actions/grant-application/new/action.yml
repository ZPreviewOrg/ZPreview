name: 'Process New Grant Application'
description: 'Processes a new grant application by applying configured labels, assignments and notifications'

inputs:
  github-token:
    description: 'GitHub token with necessary permissions'
    required: true
  vars:
    description: 'GitHub Variables containing workflow configuration'
    required: true
  event:
    description: 'GitHub event that triggered the workflow'
    required: true

runs:
  using: "composite"
  steps:
    - name: Parse Workflow Configuration
      id: parse-config
      uses: actions/github-script@v7
      with:
        script: |
          const vars = ${{fromJSON(inputs.vars)}};
          const event = ${{fromJSON(inputs.event)}};
          const config = vars.WORKFLOW_PENDING_GRANT_APPLICATION_LABELED_NEW;
          
          // Get the event label name that triggered this workflow
          const eventLabel = ${{ inputs.event.label }};
          const eventAction = ${{ inputs.event.action }};
          const issueLabels = ${{ inputs.issue.labels }}.map(l => l.name);
          if (!eventLabel) {
            core.setFailed('No label found in event payload');
            return;
          }
          if (!eventAction) {
            core.setFailed('No action found in event payload');
            return;
          }

          // Find matching configuration based on labeled/unlabeled trigger and required labels
          const matchingConfig = config.find(c => {
            // First check if the trigger matches
            let triggerMatches = false;
            if (eventAction === 'labeled') {
              triggerMatches = c.trigger.labeled === eventLabel;
            } else if (eventAction === 'unlabeled') {
              triggerMatches = c.trigger.unlabeled === eventLabel;
            }
            
            // If trigger doesn't match, no need to check required labels
            if (!triggerMatches) return false;
            
            // If there are required labels, check if they all exist
            if (c.trigger.requiredExistingLabels?.length > 0) {
              return c.trigger.requiredExistingLabels.every(required => 
                issueLabels.includes(required)
              );
            }
            
            // If no required labels specified, just use the trigger match
            return triggerMatches;
          });
          
          if (!matchingConfig) {
            core.info(`No configuration found for label: ${eventLabel}`);
            return;
          }
          
          // Set outputs for subsequent steps
          core.setOutput('addLabels', JSON.stringify(matchingConfig.actions.addLabels || []));
          core.setOutput('removeLabels', JSON.stringify(matchingConfig.actions.removeLabels || []));
          core.setOutput('addAssignees', JSON.stringify(matchingConfig.actions.assignments.add || []));
          core.setOutput('removeAssignees', JSON.stringify(matchingConfig.actions.assignments.remove || []));
          
          // Handle special notification values
          let notification = matchingConfig.actions.notification;
          if (notification === '-') {
            notification = '';
          } else if (notification.includes('or')) {
            // For cases like "- or ADMIN_NOTIFY...", take the second option
            notification = notification.split('or').pop().trim();
          }
          core.setOutput('notification', notification);
          
          // Handle special status values
          let status = matchingConfig.actions.status;
          if (status === '-') {
            status = '';
          }
          core.setOutput('status', status);

    - name: Apply Labels
      id: add-labels
      if: steps.parse-config.outputs.addLabels != '[]'
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addLabels($labelIds: [ID!]!, $issueId: ID!) {
            addLabelsToLabelable(input: {labelableId: $issueId, labelIds: $labelIds}) {
              clientMutationId
            }
          }
        labelIds: ${{ steps.parse-config.outputs.addLabels }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Remove Labels
      id: remove-labels
      if: steps.parse-config.outputs.removeLabels != '[]'
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation removeLabels($labelIds: [ID!]!, $issueId: ID!) {
            removeLabelsFromLabelable(input: {labelableId: $issueId, labelIds: $labelIds}) {
              clientMutationId
            }
          }
        labelIds: ${{ steps.parse-config.outputs.removeLabels }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Add Assignees
      id: add-assignees
      if: steps.parse-config.outputs.addAssignees != '[]'
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addAssignees($assigneeIds: [ID!]!, $issueId: ID!) {
            addAssigneesToAssignable(input: {assignableId: $issueId, assigneeIds: $assigneeIds}) {
              clientMutationId
            }
          }
        assigneeIds: ${{ steps.parse-config.outputs.addAssignees }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Remove Assignees
      id: remove-assignees
      if: steps.parse-config.outputs.removeAssignees != '[]'
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation removeAssignees($assigneeIds: [ID!]!, $issueId: ID!) {
            removeAssigneesFromAssignable(input: {assignableId: $issueId, assigneeIds: $assigneeIds}) {
              clientMutationId
            }
          }
        assigneeIds: ${{ steps.parse-config.outputs.removeAssignees }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Create Comment Notification
      id: create-comment
      if: steps.parse-config.outputs.notification != ''
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addComment($body: String!, $issueId: ID!) {
            addComment(input: {body: $body, subjectId: $issueId}) {
              clientMutationId
            }
          }
        body: ${{ steps.parse-config.outputs.notification }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Update Status
      id: update-status
      if: steps.parse-config.outputs.status != ''
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation updateStatus($state: IssueState!, $issueId: ID!) {
            updateIssue(input: {state: $state, id: $issueId}) {
              clientMutationId
            }
          }
        state: ${{ steps.parse-config.outputs.status }}
        issueId: ${{ inputs.issue.node_id }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Check for Errors
      if: |
        steps.add-labels.outcome == 'failure' ||
        steps.remove-labels.outcome == 'failure' ||
        steps.add-assignees.outcome == 'failure' ||
        steps.remove-assignees.outcome == 'failure' ||
        steps.create-comment.outcome == 'failure' ||
        steps.update-status.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const errors = [];
          if ('${{ steps.add-labels.outcome }}' === 'failure') errors.push('Failed to add labels');
          if ('${{ steps.remove-labels.outcome }}' === 'failure') errors.push('Failed to remove labels');
          if ('${{ steps.add-assignees.outcome }}' === 'failure') errors.push('Failed to add assignees');
          if ('${{ steps.remove-assignees.outcome }}' === 'failure') errors.push('Failed to remove assignees');
          if ('${{ steps.create-comment.outcome }}' === 'failure') errors.push('Failed to create comment');
          if ('${{ steps.update-status.outcome }}' === 'failure') errors.push('Failed to update status');
          
          core.setFailed(`Some operations failed: ${errors.join(', ')}`);
