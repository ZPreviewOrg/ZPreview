name: 'Process New Grant Application'
description: 'Processes a new grant application by applying configured labels, assignments and notifications'

inputs:
  github-token:
    description: 'GitHub token with necessary permissions'
    required: true
  vars:
    description: 'GitHub Variables containing workflow configuration'
    required: true
  event:
    description: 'GitHub event that triggered the workflow'
    required: true

runs:
  using: "composite"
  steps:
    - name: Parse Workflow Configuration
      id: parse-config
      uses: actions/github-script@v7
      with:
        script: |
          const vars = ${{toJSON(fromJSON(inputs.vars))}};
          const event = ${{toJSON(fromJSON(inputs.event))}};

          const eventLabel = event.label?.name;
          const eventAction = event.action;
          const issueLabels = event.issue.labels.map(l => l.name);

          if (!eventLabel) {
            core.setFailed('No label found in event payload');
            return;
          }
          if (!eventAction) {
            core.setFailed('No action found in event payload');
            return;
          }

          // Gather all WORKFLOW_ keys
          const workflowKeys = Object.keys(vars).filter(k => k.startsWith("WORKFLOW_GRANT_APPLICATION_LABELED_NEW"));

          let matchingConfig = null;
          for (const key of workflowKeys) {
            let config;
            try {
              config = JSON.parse(vars[key]);
            } catch (e) {
              core.warning(`Failed to parse JSON for ${key}: ${e.message}`);
              continue;
            }

            if (!Array.isArray(config)) {
              core.warning(`Configuration under ${key} is not an array, skipping.`);
              continue;
            }

            const found = config.find(c => {
              // Determine if this config matches the trigger
              let triggerMatches = false;
              if (eventAction === 'labeled' && c.trigger?.labeled) {
                triggerMatches = (c.trigger.labeled === eventLabel);
              } else if (eventAction === 'unlabeled' && c.trigger?.unlabeled) {
                triggerMatches = (c.trigger.unlabeled === eventLabel);
              }

              if (!triggerMatches) return false;

              // If required labels specified, ensure all are present
              if (Array.isArray(c.trigger?.requiredExistingLabels) && c.trigger.requiredExistingLabels.length > 0) {
                return c.trigger.requiredExistingLabels.every(required => issueLabels.includes(required));
              }

              return true;
            });

            if (found) {
              matchingConfig = found;
              break;
            }
          }

          if (!matchingConfig) {
            core.info(`No configuration found for label: ${eventLabel} and action: ${eventAction}`);
            return;
          }

          // Extract actions
          const addLabels = matchingConfig.actions?.addLabels || [];
          const removeLabels = matchingConfig.actions?.removeLabels || [];
          const addAssignees = matchingConfig.actions?.assignments?.add || [];
          const removeAssignees = matchingConfig.actions?.assignments?.remove || [];
          
          // Notifications
          let notification = matchingConfig.actions?.notification || '';
          if (notification === '-') {
            notification = '';
          } else if (notification.includes('or')) {
            // For cases like "- or ADMIN_NOTIFY...", take the second part
            notification = notification.split('or').pop().trim();
          }
          notification = vars[notification] || '';
          

          // Status
          let status = matchingConfig.actions?.status || '';
          if (status === '-') {
            status = '';
          }

          core.info("123123");
          core.info(addLabels);
          core.info(removeLabels);
          core.info(addAssignees);
          core.info(removeAssignees);
          core.info(notification);
          core.info(status);

          core.setOutput('addLabels', addLabels);
          core.setOutput('removeLabels', removeLabels);
          core.setOutput('addAssignees', addAssignees);
          core.setOutput('removeAssignees', removeAssignees);
          core.setOutput('notification', notification);
          core.setOutput('status', status);

    # Convert label names into IDs (if any)
    - name: Convert Label Names to IDs
      id: convert-labels
      uses: actions/github-script@v7
      if: ${{ steps.parse-config.outputs.addLabels || steps.parse-config.outputs.removeLabels }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const event = ${{toJSON(fromJSON(inputs.event))}};
          const owner = event.repository.owner.login;
          const repo = event.repository.name;

          async function getLabelIds(labelNames) {
            const ids = [];
            for (const name of labelNames) {
              if (!name || name === '-') continue;
              const labelData = await github.rest.issues.getLabel({ owner, repo, name });
              if (labelData && labelData.data && labelData.data.node_id) {
                ids.push(labelData.data.node_id);
              } else {
                core.warning(`Could not find label ID for ${name}`);
              }
            }
            return ids;
          }

          const addLabels = ${{ steps.parse-config.outputs.addLabels }} || '[]';
          const removeLabels = ${{ steps.parse-config.outputs.removeLabels }} || '[]';

          const addLabelIds = await getLabelIds(addLabels);
          const removeLabelIds = await getLabelIds(removeLabels);

          core.setOutput('addLabelIds', addLabelIds);
          core.setOutput('removeLabelIds', removeLabelIds);

    - name: Get Project Item ID
      id: get-project-item-id
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          query getProjectItem($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }

        variables: |
          {
            "projectId": ${{ toJSON(fromJSON(inputs.vars).PROJECT_GRANT_APPLICATION_PROJECT_ID) }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Process Project Item Result
      id: process-project-item
      uses: actions/github-script@v7
      with:
        script: |
          const result = ${{ steps.get-project-item-id.outputs.data }};
          const issueNodeId = ${{toJSON(fromJSON(inputs.event).issue.node_id)}};
          
          const items = result.node.items.nodes;
          const item = items.find(i => i.content && i.content.id === issueNodeId);
          if (!item) {
            core.setFailed('No matching project item found for this issue.');
            return;
          }
          
          core.setOutput('projectItemId', item.id);

    # Convert assignee logins into user IDs (if any)
    - name: Convert Assignee Logins to IDs
      id: convert-assignees
      uses: actions/github-script@v7
      if: ${{ steps.parse-config.outputs.addAssignees || steps.parse-config.outputs.removeAssignees }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const addAssignees = ${{ steps.parse-config.outputs.addAssignees }};
          const removeAssignees = ${{ steps.parse-config.outputs.removeAssignees }};

          async function getUserIds(logins) {
            const ids = [];
            for (const login of logins) {
              if (!login || login === '-') continue;
              const userData = await github.rest.users.getByUsername({ username: login });
              if (userData && userData.data && userData.data.node_id) {
                ids.push(userData.data.node_id);
              } else {
                core.warning(`Could not find user ID for ${login}`);
              }
            }
            return ids;
          }

          const addAssigneeIds = await getUserIds(addAssignees);
          const removeAssigneeIds = await getUserIds(removeAssignees);

          core.setOutput('addAssigneeIds', addAssigneeIds);
          core.setOutput('removeAssigneeIds', removeAssigneeIds);

    - name: Apply Labels
      id: add-labels
      if: ${{ steps.convert-labels.outputs.addLabelIds }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addLabels($labelIds: [ID!]!, $issueId: ID!) {
            addLabelsToLabelable(input: {labelableId: $issueId, labelIds: $labelIds}) {
              clientMutationId
            }
          }
        variables: |
          {
            "labelIds": ${{ steps.convert-labels.outputs.addLabelIds }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Remove Labels
      id: remove-labels
      if: ${{ steps.convert-labels.outputs.removeLabelIds }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation removeLabels($labelIds: [ID!]!, $issueId: ID!) {
            removeLabelsFromLabelable(input: {labelableId: $issueId, labelIds: $labelIds}) {
              clientMutationId
            }
          }
        variables: |
          {
            "labelIds": ${{ steps.convert-labels.outputs.removeLabelIds }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Add Assignees
      id: add-assignees
      if: ${{ steps.convert-assignees.outputs.addAssigneeIds }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addAssignees($assigneeIds: [ID!]!, $issueId: ID!) {
            addAssigneesToAssignable(input: {assignableId: $issueId, assigneeIds: $assigneeIds}) {
              clientMutationId
            }
          }
        variables: |
          {
            "assigneeIds": ${{ steps.convert-assignees.outputs.addAssigneeIds }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Remove Assignees
      id: remove-assignees
      if: ${{ steps.convert-assignees.outputs.removeAssigneeIds }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation removeAssignees($assigneeIds: [ID!]!, $issueId: ID!) {
            removeAssigneesFromAssignable(input: {assignableId: $issueId, assigneeIds: $assigneeIds}) {
              clientMutationId
            }
          }
        variables: |
          {
            "assigneeIds": ${{ steps.convert-assignees.outputs.removeAssigneeIds }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Create Comment Notification
      id: create-comment
      if: ${{ steps.parse-config.outputs.notification }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation addComment($body: String!, $issueId: ID!) {
            addComment(input: {body: $body, subjectId: $issueId}) {
              clientMutationId
            }
          }
        variables: |
          {
            "body": ${{ toJSON(steps.parse-config.outputs.notification) }},
            "issueId": ${{ toJSON(fromJSON(inputs.event).issue.node_id) }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true

    - name: Update Project Status
      id: update-status
      if: ${{ steps.parse-config.outputs.status }}
      uses: octokit/graphql-action@v2.x
      with:
        query: |
          mutation updateProjectItemStatus($projectId: ID!, $itemId: ID!, $fieldId: ID!, $statusOptionId: String!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: { singleSelectOptionId: $statusOptionId }
            }) {
              projectV2Item {
                id
              }
            }
          }
        variables: |
          {
            "projectId": ${{ toJSON(fromJSON(inputs.vars).PROJECT_GRANT_APPLICATION_PROJECT_ID) }},
            "itemId": ${{ steps.process-project-item.outputs.projectItemId }},
            "fieldId": ${{ toJSON(fromJSON(inputs.vars).PROJECT_GRANT_APPLICATION_STATUS_FIELD_ID) }},
            "statusOptionId": ${{ fromJSON(inputs.vars)[steps.parse-config.outputs.status] }}
          }
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      continue-on-error: true


    - name: Check for Errors
      if: ${{ steps.add-labels.outcome == 'failure' || steps.remove-labels.outcome == 'failure' || steps.add-assignees.outcome == 'failure' || steps.remove-assignees.outcome == 'failure' || steps.create-comment.outcome == 'failure' || steps.update-status.outcome == 'failure' }}
      uses: actions/github-script@v7
      with:
        script: |
          const errors = [];
          if (${{steps.add-labels.outcome == 'failure'}}) errors.push('Failed to add labels');
          if (${{steps.remove-labels.outcome == 'failure'}}) errors.push('Failed to remove labels');
          if (${{steps.add-assignees.outcome == 'failure'}}) errors.push('Failed to add assignees');
          if (${{steps.remove-assignees.outcome == 'failure'}}) errors.push('Failed to remove assignees');
          if (${{steps.create-comment.outcome == 'failure'}}) errors.push('Failed to create comment');
          if (${{steps.update-status.outcome == 'failure'}}) errors.push('Failed to update status');
          
          core.setFailed(`Some operations failed: ${errors.join(', ')}`);
