name: Grant Application Workflow

on:
  issues:
    types: [labeled, unlabeled]

permissions:
  issues: write

jobs:
  process-grant-application:
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.issue.labels.*.name, 'Grant Application') }}
    steps:
      - name: Generate a token
        id: generate-token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        with:
          app_id: ${{ vars.ADMIN_APP_ID }}
          private_key: ${{ secrets.ADMIN_APP_PRIVATE_KEY }}
          installation_retrieval_mode: id
          installation_retrieval_payload: ${{ vars.ADMIN_APP_INSTALLATION_ID }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      - name: Get Issue "Status" for All Projects
        id: get-status-list
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query GetIssueStatus($issueId: ID!) {
                node(id: $issueId) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        id
                        fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                              }
                            }
                            name
                          }
                        }
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
          variables: |
            issueId: ${{ github.event.issue.node_id }}

      - name: Get Grant Application Status
        id: get-grant-application-status
        if: ${{steps.get-status-list.outputs.data}}
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const data = ${{ steps.get-status-list.outputs.data }};
            const projectItems = data.node.projectItems.nodes;
            const filteredProjectItems = projectItems.filter(item => 
              item.project?.id === '${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}'
            );
            const filteredProjectItemsWithStatus = filteredProjectItems.filter(item => 
              item.fieldValueByName?.field?.id === '${{ vars.PROJECT_GRANT_APPLICATION_STATUS_FIELD_ID }}'
            );

            if (!filteredProjectItems || filteredProjectItems.length === 0) {
              core.info('Grant Application issue not found for ${{ github.event.issue.id }}: (vars.PROJECT_GRANT_APPLICATION_PROJECT_ID: "${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}")');
              core.setOutput('addtoproject', true);
              core.setOutput('settonew', true);
              core.setOutput('status', "New");
            } else if (!filteredProjectItemsWithStatus || filteredProjectItemsWithStatus.length === 0) {
              core.info('Grant Application issue found in project but no status found: (vars.PROJECT_GRANT_APPLICATION_STATUS_FIELD_ID: "${{ vars.PROJECT_GRANT_APPLICATION_STATUS_FIELD_ID }}")');
              core.setOutput('itemid', filteredProjectItems[0].id);
              core.setOutput('settonew', true);
              core.setOutput('status', "New");
            } else {
              core.setOutput('status', filteredProjectItemsWithStatus[0].fieldValueByName.name);
            }
            core.info(`Grant application status result: ${filteredProjectItemsWithStatus[0].fieldValueByName.name}`);

      - name: Add Issue to GitHub Project
        id: add-to-project
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        if: ${{ steps.get-grant-application-status.outputs.addtoproject }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            mutation AddIssueToProject($project_id: ID!, $content_id: ID!) {
              addProjectV2ItemById(input: { projectId: $project_id, contentId: $content_id }) {
                item {
                  id
                }
              }
            }
          variables: |
            project_id: ${{vars.PROJECT_GRANT_APPLICATION_PROJECT_ID}}
            content_id: ${{ github.event.issue.node_id }}

      - name: 'Add Issue to GitHub Project: Set Status to "New"'
        id: set-to-new
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        if: ${{ steps.get-grant-application-status.outputs.settonew }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            mutation UpdateProjectV2ItemFieldValue(
              $project_id: ID!
              $status_id: ID!
              $item_id: ID!
              $value: String!
            ) {
              updateProjectV2ItemFieldValue(
                input: {
                  projectId: $project_id
                  fieldId: $status_id
                  itemId: $item_id
                  value: { 
                    singleSelectOptionId: $value
                  }
                }
              ) {
                projectV2Item {
                  id
                }
              }
            }
          variables: |
            {
              "project_id": "${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}",
              "status_id": "${{ vars.PROJECT_GRANT_APPLICATION_STATUS_FIELD_ID }}",
              "item_id": ${{ steps.get-grant-application-status.outputs.addtoproject && fromJSON(steps.add-to-project.outputs.data).addProjectV2ItemById.item.id || steps.get-grant-application-status.outputs.itemid }},
              "value": ${{vars.PROJECT_GRANT_APPLICATION_STATUS_NEW_ID}}
            }

      - name: Logging Debug
        id: logging-debug
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            core.info(${{ toJSON(github.event) }});

      - name: Parse YAML Blocks
        id: parse-yaml
        uses: ./.github/actions/shared/markdown/yamlblocks
        with:
          markdown-content: |
            ${{ toJson(github.event.issue.body) }}
      
      - name: Process New Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'New' }}
        uses: ./.github/actions/grant-application/new
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}

      - name: Process Under Review Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'Under Review' }}
        uses: ./.github/actions/grant-application/under-review
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}

      - name: Process Approved Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'Approved' }}
        uses: ./.github/actions/grant-application/approved
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}

      - name: Process In Progress Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'In Progress' }}
        uses: ./.github/actions/grant-application/in-progress
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}

      - name: Process Complete Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'Complete' }}
        uses: ./.github/actions/grant-application/complete
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}
      
      - name: Process Declined Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'Declined' }}
        uses: ./.github/actions/grant-application/declined
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}

      - name: Process Cancelled Status
        if: ${{ steps.get-grant-application-status.outputs.status == 'Cancelled' }}
        uses: ./.github/actions/grant-application/cancelled
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          vars: ${{ toJSON(vars) }}
          event: ${{ toJSON(github.event) }}